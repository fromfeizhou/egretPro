module com_main {


	/**
	 * 战功商城
	 */
    export class ExploitShopView extends CView {
        public static NAME = 'ExploitShopView';
        public m_pViewRoot: eui.Group;
        public m_shopScroller: eui.Scroller;
        public m_List: eui.List;
        public m_labReset: eui.Label;
        public m_refreshTime: eui.Label;
        public m_pExploit: eui.Label;



        private m_pWidgets: any = {};
        private m_curIndex = 0;
        private m_curInfo = null; //当前数据
        private m_curTime = 0;
        private m_coinId = 0;    //消耗的货币Id
        private m_numMax = 0;//消耗的货币数量
        public currState = 0;  //当前选择按钮类型
        public constructor(width: number, height: number) {
            super();
            this.name = ExploitShopView.NAME;
            this.initApp("world/ExploitShopViewSkin.exml");
            // this.width = width;
            // this.height = height;
        }

        $onRemoveFromStage(isclear = true): void {
            this.onDestroy();
            super.$onRemoveFromStage(isclear);
        }

        public onDestroy(): void {
            super.onDestroy();
            EventMgr.removeEventByObject(RoleEvent.ROLE_RESOURCE, this);
            this.m_List.removeEventListener(eui.ItemTapEvent.ITEM_TAP, this.onTouchTab, this);
            Utils.TimerManager.remove(this.updateRemainTime, this);
        }

        protected childrenCreated(): void {
            super.childrenCreated();
            // this.height = this.stage.stageHeight;
            Utils.toStageBestScaleHeigt(this);
            // 初始化界面
            ShopProxy.send_GET_MERCHANT(ShopStoreIdEnum.EXPLOIT);
            // this.initView(this.m_curInfo);
        }


        private onClickBack() {
            com_main.UpManager.history();
        }

        private m_pListDataProvider: eui.ArrayCollection;
        private m_pRemainTime = 0;
        private initView(data) {
            this.refreshData(data);
            this.updateExploitLab(PropEnum.MILITARY_MERITS_CONSUMED);
            EventMgr.addEvent(RoleEvent.ROLE_RESOURCE, this.updateExploitLab, this);
            this.m_List.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.onTouchTab, this);
        }

        private refreshData(data) {
            this.labRefresh();
            let res: IStoreItemRD[] = [];
            for (let i = 0; i < data.goods.length; i++) {
                res.push({ storeId: ShopStoreIdEnum.EXPLOIT, info: data.goods[i] });
            }
            if (this.m_pListDataProvider) {
                this.m_pListDataProvider.replaceAll(res);
            } else {
                this.m_pListDataProvider = new eui.ArrayCollection(res);
                this.m_List.dataProvider = this.m_pListDataProvider;
                this.m_List.itemRenderer = ShopTreasureCell;
            }
             
            let Refresh = this.m_curInfo.autoRefresh;
            if (Refresh.length <= 0) {//是否自动刷新
                return;
            }
            let timeArr = [];
            for (let i in Refresh) {
                let h = Refresh[i].key, m = Refresh[i].value;
                var date = new Date(TimerUtils.getServerTimeMill());
                date.setHours(h, m, 0, 0);
                timeArr.push(date.getTime());
            }
            let nowTime = TimerUtils.getServerTimeMill();
            // this.m_labReset.textFlow = Utils.htmlParser(GCodeFromat(CLEnum.SHOP_RUSH_RESET, this.resetTime));

            for (let i = 1; i < timeArr.length; i++) {
                let curIndex = i;
                let preValue = timeArr[i - 1];
                let curValue = timeArr[i];
                if (nowTime > preValue && nowTime < curValue) {
                    console.log('nowTime0=', curValue);
                    this.m_curTime = curValue;
                    break;
                } else if (nowTime > curValue && curIndex == timeArr.length - 1) {
                    console.log('nowTime1=', timeArr[0]);
                    this.m_curTime = timeArr[0];
                    break;
                } else if (nowTime < preValue) {
                    this.m_curTime = preValue;
                    break;
                }
            }
            this.m_refreshTime.textFlow = Utils.htmlParser(GCodeFromat(CLEnum.SHOP_RUSH_DES, TimerUtils.dateFormat("hh:mm:ss", this.m_curTime / 1000)));
        }
        /**战功商城重置时间 */
        private labRefresh() {
            this.m_labReset.textFlow = Utils.htmlParser(GCode(CLEnum.EXPLOIT_TIPS));
        }
        /**
         * 更新军功显示
         * 
         */
        public updateExploitLab(itemId: number) {
            if (itemId != PropEnum.MILITARY_MERITS_CONSUMED) return;
            this.m_pExploit.text = `${RoleData.militaryCoin}`
        }

        private onTouchTab(e) {
            var item = e.item;
            this.m_pWidgets[item.itemId] = e.itemRenderer;
        }

        private updateRemainTime() {
            var time = Math.floor((TimerUtils.getServerTimeMill() - this.m_curTime) / 1000);
            if (time == 0 || time == 1) {
                Utils.TimerManager.remove(this.updateRemainTime, this);
                let storeId = ShopTreasure.STORE_LIST[this.m_curIndex];
                ShopProxy.send_GET_MERCHANT(storeId);
            }
        }

        protected listenerProtoNotifications(): any[] {
            return [
                ProtoDef.GET_MERCHANT,//获得商城信息
                ProtoDef.MERCHANT_BUY_GOODS,//商城购买物品
            ];
        }
        /**处理协议号事件 */
        protected executes(notification: AGame.INotification) {
            let body = notification.getBody();
            let protocol: number = Number(notification.getName());
            switch (protocol) {
                case ProtoDef.GET_MERCHANT: {// 获得商城信息
                    if (body) {
                        this.m_curInfo = body.info;
                        this.initView(body.info);
                    }
                    break;
                }
                case ProtoDef.MERCHANT_BUY_GOODS: {// 商城购买物品
                    let data = body as gameProto.IMerchantBuyGoodsResp;
                    if (data) {
                        //刷新商品
                        for (let i = 0; i < this.m_pListDataProvider.source.length; i++) {
                            let item = this.m_pListDataProvider.getItemAt(i) as IStoreItemRD;
                            if (item.info.id == data.goodsInfo.id) {
                                let tmp: IStoreItemRD = { storeId: ShopStoreIdEnum.EXPLOIT, info: data.goodsInfo }
                                this.m_pListDataProvider.replaceItemAt(tmp, i);
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        }

    }

}